---
layout: post
title:  "Reminder"
date:   2016-08-31 13:33:20 +0200
author: Rémi Bauzac

---

Before dipping into code, a short reminder is required.

# vocabulary

A **source code** is human readable code whose purpose is to be transformed to be execute after. The source code can be written in different language, each with their own properties (C, C++, Python, Java, Javascript, Ruby, PHP, Go ...).

The **compilation** of source code is a process of transformation into a destination code (called program) in an executable language:

* Either by a **virtual machine**;
* Or by a processor.

The **compilation** can be divided into several stages of transformation and optimization:

* **source code** lexical analysis
* **source code** parsing
* Program Generation
* Program Optimization

A language is called **compiled** if the program generated by **compilation** is executable by processor.
The action to execute a compiled language is called **execution**.

A language is called **interpreted** if the program generated by **compilation** is executable by a **virtual machine**.
The action to execute an interpreted language is called **interpretation**.

A **virtual machine** is a program that interprets the instructions of a **interpreted language** program.
This virtual machine can be interpreted itself by a virtual machine (This is the case of the Jython interpreter that interprets the Python language, while itself is written in Java, itself interpreted by Java virtual machine).

Majority of languages go through a compilation process before being executed or interpreted.
Bash scripts, executed by a **virtual machine** is an exception. In this case the **source code** is line by line interpreted.

# What is a JiT compiler ?
A JiT compiler (JiT as **J**ust **i**n **T**ime) is a tool used by a **virtual machine** when interpreting a program from a **interpreted language**. This tool is responsible for converting this program (or a part of this program) during the interpretation to an executable one performed by processor, in order to speed up computing. In other words, the interpreter create binary program from a **interpreted language**, and run it by processor instead of interpret it.
Most of the time, this transformation is the opportunity to optimize program based on context.

The following table describe different interpreters :


| Langage interprété   | JiT VM |  URL des projets |
|----------------------|--------|----------------|
| PHP |  HHVM | http://hhvm.com |
| Javascript | SpiderMonkey  | http://developer.mozilla.org/en/SpiderMonkey |
| Java | Oracle JVM, JatoVM | http://www.oracle.com/fr/java/overview/index.html, http://jatovm.org |
| Python | PyPy | http://pypy.org |
| Lua | LuaJit or my own lua JiT project | http://luajit.org, https://github.com/RemiBauzac/lua/tree/feature/jit-5.2|
| Perl | no JiT | |
| Ruby | RuJIT | https://github.com/imasahiro/rujit |
| Tcl  | no JiT | |
| VBScript | no JiT | |

# What's next ?
The next step is to build your first interpreted language, helped by lex and yacc.